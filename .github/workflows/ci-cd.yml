name: CI/CD Pipeline with Docker Deploy

on:
  push:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: python -m unittest test_main.py

  build-docker-image:
    runs-on: ubuntu-latest
    needs: build-and-test
     steps:
      - uses: actions/checkout@master

      - name: Login to docker hub
        if: success()
        uses: actions-hub/docker/login@master
        env:
          DOCKER_USERNAME: ${{ github.repository_owner }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}

      - name: Build image
        if: success()
        run: docker build -t ${GITHUB_REPOSITORY}:${IMAGE_TAG} .

      - name: Push to docker registry
        if: success()
        uses: actions-hub/docker@master
        with:
          args: push ${GITHUB_REPOSITORY}:${IMAGE_TAG}

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Login to your server (or kubernetes cluster)
        uses: appleboy/ssh-action@v2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            #Example 1: Deploying to a docker host using docker run
            docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/my-python-app:latest
            docker stop my-running-app || true  # Stop existing container if it exists.
            docker rm my-running-app || true
            docker run -d -p 8000:8000 --name my-running-app docker.pkg.github.com/$GITHUB_REPOSITORY/my-python-app:latest
